@import "../abstracts/variables";
@import "../abstracts/mixins";

// Styleguide SASS file for various elements.

// Spacer to space elements in the guide.

.spacerDiv {
    margin-top: 2.5rem;
    margin-bottom: 2.5rem;
}

// HR
hr {
	border: none;
	height: 1px;
	background: lighten($black, 80%);
	margin: 2rem 0;
	&.-medium {
		margin: 3rem 0;
	}
	&.-large {
		margin: 4rem 0;
	}
	&.-thin {
		margin: 1rem 0;
		background: lighten($black, 92%);
	}
} 
		 
// ALERT MESSAGES
.Alert {
	margin-bottom: 20px;
	padding: 15px;
	border: 1px solid transparent;
	border-radius: 4px;
	text-align: center;

	// has-success
	&.has-success {
		background: $has-success;
		color: darken($has-success, 55%);
	}

	// has-warning
	&.has-warning {
		background: $has-warning;
		color: darken($has-warning, 55%);
	}

	// has-error
	&.has-error {
		background: $has-error;
		color: darken($has-error, 55%);
	}
}

.has-error, .has-error + label {  
	color: darken($has-error, 35%); 
}

.has-warning, .has-warning + label {  
	color: darken($has-warning, 40%); 
}

.has-success, .has-success + label{
	color: darken($has-success, 35%); 
}
 
		 
// FORMS
label, .Label {
	display: block;
	margin-bottom: .25rem;
	font-family: $mainF;
	font-weight: $fw-bold;
	color: $charcoal;
}

.FormElement {
	position: relative;
	margin-bottom: 25px;
	@include Placeholder(#{$fontbase}px, #{$fontbase}px, $charcoal);

	// Boxed
	&.FormElement-boxed{
		background: $grayLighter;
	}

	// Bordered
	&.FormElement-bordered{
		outline: 1px solid $grayLight!important; 
	}

	// Radio and checkbox
	&.FormElement_radio, 
	&.FormElement_checkbox{
		display: inline-block;

		&.FormElement-boxed {
			padding: 0.8em 0.8em 0.7em;
		}

		input{
			display: none!important;
		}

		label{
			position: relative;
			margin-bottom: 0;
			padding-left: 1.8em;
			&:before{
			    content: '';
			    position: absolute;
			    top: 0.08em;
			    left: 0;
			    width: 1.1em;
			    height: 1.1em; 
			    background: $white;
			    border: 1px solid lighten(gray, 25%);
			    border-radius: 2px;
			} 
		}

		&[class*="radio"]{
			label{
				&:before{
					border-radius: 40px;
				}
			}
		}

		// Checked state 
		:checked + label{ 
			&:before{
				background: $activeColor;
				border-color: $activeColor;
			}
		}
		
		// Spacing if more than one child in same line
		// All siblings following the first one will be spaced accordingly
		// Note : must be placed in a direct parent to work (div, p, span, whatever)
		&:first-child ~ & {  
			margin-left: 0.8em; 
		}
	}

	// Inputs
	input:not([type="radio"]),
	input:not([type="checkbox"]){ 
		display: block;
		color: $charcoal;
		font-weight: $fw-bold;
		line-height: 32px;
		font-size: 18px;
		font-family: $mainF;
		border-radius: 4px;
		width: 100%;
		padding: 0.8rem;
		height: 50px;
		background: none;
		border: 1px solid $grey; 
		-moz-appearance: none;
		-webkit-appearance: none;
		appearance: none;
	}

	// File upload
	&.FormElement_upload {
		width: 100%;

		input {
			position: absolute;
			height: .1px;
			width: .1px;
			overflow: hidden;
			opacity: .01;
			z-index: -99999;
		}

		label {
			width: 100%;
			margin: 0!important;
			padding: 0.8rem;
			background: none;
			border: none;
		}
	}

	// Submit
	&.FormElement_submit {
		[type="submit"] {
			// when disabled (two class to keep backward compatibility with older Core)
			&.disabled, &.is-disabled {
				pointer-events: none;
				opacity: .45;
			}	
		}

		span {
			position: absolute;
			width: 0;
			height: 0;
			opacity: 0;
			visibility: hidden;
			z-index: -9999;
		}
	}

	// Select
	&.FormElement_select {
		select {
			font-size: 12px;
			font-family: $mainF;
			font-weight: $fw-bold;
			background: transparent;
			width: 100%;
			height: 47px;
			padding: 0 1em;
			border:0;
			border-radius: 0;
			-moz-appearance: none;
			-webkit-appearance: none;
			appearance: none;
			&::-ms-expand {
				display: none;
			}
		}

		&[class*="Icon"] {
			&:before{
				pointer-events: none;
			}
		}
	}

	// Textarea
	textarea {
		font-weight: $fw-bold;
		color: $charcoal;
		line-height: 32px;
		font-size: 18px;
		font-family: $mainF;
		background: none;
		width: 100%;
		max-width: 100%;
		height: 252px;
		max-height: auto;
		min-height: 100px;
		padding: 0.8rem;
		border: solid 1px $grey;
	}

	// HR visual reset
	hr {
		margin: 0;
		width: 100%;
		background: lighten($black, 85%)!important;
	}

	// Colored line at input focus
	input:focus ~ .line{
		width: 100%;
	}

	.line { 
		display: inline-block;
		top: calc(100% - 1px);
		z-index: 1000;
		left: 0;
		position: absolute;
		width: 0%;
		height: 1px;
		background: $activeColor;
		transition: all $ease-in .3s;
	}

	// when has an alert
	&.has-error, &.has-success, &.has-warning {
		margin-bottom: 10px;

		+ label {
			text-align: center;
			margin-bottom: 25px;
		}
	}
}

// Table
table {
	width: 100%;
	font-weight: $fw-medium;
	margin-bottom: 30px;

	th {
		@include rem(11);
		text-transform: uppercase;
	}

	td {
		@include rem(13);
	}

	th, td {
		padding: 10px;
		border: 1px solid lighten($black, 80%); 
		&:empty {
			background: lighten($black, 95%);
		}
	}
}

// Selection highlight's color
::-moz-selection {
	background-color: $mainColor;
	color: $white;
}

::selection {
	background-color: $mainColor;
	color: $white;
}

// Accordions
.Accordions{
	margin-bottom: 2em;

	&_row {
		position: relative;
		&:not(:last-child){
			&:before {
				content: '';
				position: absolute;
				left: 0;
				right: 0;
				bottom: 0;
				height: 2px;
				background: $grayLighter;
				pointer-events: none;
			}
		}

		&_header {
			padding-top: 1.3em;
			padding-bottom: 1.3em;

			.-title {
				margin: 0;
				transition: all $ease-in .45s;
				&:before {
					transition: all $ease-in .45s;
				}
			}
				
		}
		
		&_content {
			height: 0;
			overflow: hidden;
			transition: all $ease-in .45s;
			pointer-events: none;

			&_inner {
				width: 100%;
				padding: 0 0 15px 0;
				transition: all $ease-in .45s .15s;

				.Editable {
					p:last-child{
						margin: 0;
					}
				}
			}
		} 

		// ** is-active ** //
		$parent : &;
		&.is-active {
			#{$parent}_header {
				.-title {
					color: $activeColor;
					&:before{
						color: $activeColor;
					}
				}
			}

			#{$parent}_content {
				pointer-events: all;
			}
		}
	}
}